# -*- coding: utf-8 -*-
"""Final Project - CS2704 - 3713401

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11J8qBFBL-27k7RbMtK11mZCYJowzzC3e
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Your file path
file_path = 'filtered-energy-consumption-final.xlsx'
file_path2 = 'filtered-CO2Emission.xlsx'


# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)
df2 = pd.read_excel(file_path2)


# Print the data for the year 2021
print(df)
print(df2)

import pandas as pd

# Read the Excel file
file_path = 'fossil-fuel-primary-energy-final.csv'
df = pd.read_csv(file_path)

# Filter rows containing the '(EI)' tag in the 'Entity' column
filtered_df = df[df['Entity'].str.contains('(EI)')]



# Save the filtered DataFrame to a new Excel file
filtered_file_path = 'filtered-energy-consumption.xlsx'
filtered_df.to_excel(filtered_file_path, index=False)


# Display the filtered DataFrame
print(filtered_df)

import pandas as pd

# Read the Excel file
file_path = 'annual-co-emissions-by-region-final.csv'
df = pd.read_csv(file_path)

# Filter rows containing the '(EI)' tag in the 'Entity' column
df = df[df['Entity'].str.contains('(GCP)')]
df = df[df['Year'] >= 1965]



# Save the filtered DataFrame to a new Excel file
filtered_file_path = 'filtered-CO2Emission.xlsx'
df.to_excel(filtered_file_path, index=False)


# Display the filtered DataFrame
print(df)

import pandas as pd

# Read the CSV file
file_path = 'filtered-energy-consumption.xlsx'
df = pd.read_excel(file_path)

# Replace '(EI)' with '(GCP)' in the 'Entity' column
df['Entity'] = df['Entity'].str.replace('\(GCP\)','GCP',regex=True)

# Filter the data for years 1965 onward
df = df[df['Year'] >= 1965]

# Save the modified DataFrame to a new CSV file
output_file_path = 'filtered-energy-consumption-final.xlsx'
df.to_excel(output_file_path, index=False)

print(f'Modified data saved to {output_file_path}')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress

# Assuming df is your merged DataFrame containing the data
file_path_energy = 'filtered-energy-consumption-final.xlsx'
file_path_co2 = 'filtered-CO2Emission.xlsx'

# Load energy consumption data
df_energy = pd.read_excel(file_path_energy)

# Load CO2 emissions data
df_co2 = pd.read_excel(file_path_co2)

# Merge dataframes based on 'Entity' and 'Year'
df = pd.merge(df_energy, df_co2, on=['Entity', 'Year'])

# Perform linear regression
slope, intercept, r_value, p_value, std_err = linregress(df['EnergyConsumption'], df['CO2Emissions'])

# Scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(df['EnergyConsumption'], df['CO2Emissions'], label='Data')
plt.title('Scatter Plot: Energy Consumption vs CO2 Emissions')
plt.xlabel('Energy Consumption')
plt.ylabel('CO2 Emissions')

# Plot the regression line
plt.plot(df['EnergyConsumption'], slope * df['EnergyConsumption'] + intercept, color='red', label='Linear Regression')

# Display the plot
plt.legend()
plt.show()

# Print the results
print(f'Linear Regression Equation: y = {slope:.2f}x + {intercept:.2f}')
print(f'Pearson correlation coefficient: {r_value:.2f}')
print(f'P-value: {p_value:.2e}')

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Read data from Excel files
df_co2 = pd.read_excel('filtered-CO2Emission.xlsx')
df_energy = pd.read_excel('filtered-energy-consumption-final.xlsx')

# Merge dataframes on 'Region' and 'Year'
df_merged = pd.merge(df_co2, df_energy, on=['Entity', 'Year'])

# Extract relevant columns
x = df_merged['EnergyConsumption']
y = df_merged['CO2Emissions']

# Create scatter plot
plt.scatter(x, y, alpha=0.5)
plt.title('Energy Consumption vs CO2 Emission')
plt.xlabel('Energy Consumption')
plt.ylabel('CO2 Emission')

# Calculate and display the correlation coefficient and p-value
corr_coefficient, p_value = pearsonr(x, y)
print(f'Correlation Coefficient: {corr_coefficient}')
print(f'P-Value: {p_value}')

# Display the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load your data
file_path = 'filtered-CO2Emission.xlsx'
file_path2 = 'filtered-energy-consumption-final.xlsx'

# Assuming your data is in a sheet named 'Sheet1'
df_emissions = pd.read_excel(file_path)
df_consumption = pd.read_excel(file_path2)

# Bar graph for CO2 Emission
plt.figure(figsize=(10, 6))
plt.bar(df_emissions['Year'], df_emissions['CO2Emissions'], color='blue')
plt.title('CO2 Emission per Year')
plt.xlabel('Year')
plt.ylabel('CO2 Emission')
plt.show()

# Bar graph for Energy Consumption
plt.figure(figsize=(10, 6))
plt.bar(df_consumption['Year'], df_consumption['EnergyConsumption'], color='green')
plt.title('Energy Consumption per Year')
plt.xlabel('Year')
plt.ylabel('Energy Consumption')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df_emissions and df_energy are your dataframes
file_path_emissions = '/content/filtered-CO2Emission.xlsx'
df_emissions = pd.read_excel(file_path_emissions)
file_path_energy = '/content/filtered-energy-consumption-final.xlsx'
df_energy = pd.read_excel(file_path_energy)

# Merge dataframes on 'Region' and 'Year'
df_merged = pd.merge(df_emissions, df_energy, on=['Entity', 'Year'])

# Create a scatter plot to demonstrate correlation
plt.figure(figsize=(12, 8))

sns.scatterplot(data=df_merged, x='EnergyConsumption', y='CO2Emissions', hue='Entity', palette='viridis', s=100)
plt.title('CO2 Emission vs Energy Consumption')
plt.xlabel('Energy Consumption')
plt.ylabel('CO2 Emission')
plt.legend(title='Region', bbox_to_anchor=(1, 1))
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df_emissions and df_energy are your DataFrames
file_path_emissions = '/content/filtered-CO2Emission.xlsx'
df_emissions = pd.read_excel(file_path_emissions)
file_path_energy = '/content/filtered-energy-consumption-final.xlsx'
df_energy = pd.read_excel(file_path_energy)

# Merge the two DataFrames on 'Year' and 'Region'
df_merged = pd.merge(df_emissions, df_energy, on=['Year', 'Entity'])

# Select the relevant columns for correlation analysis
df_corr = df_merged[['CO2Emissions', 'EnergyConsumption']]

# Calculate the correlation matrix
correlation_matrix = df_corr.corr()

# Create a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap: CO2 Emission vs Energy Consumption')
plt.show()